# SPDX-FileCopyrightText: 2015â€“2022 Felix A. Crux <felixc@felixcrux.com> and CONTRIBUTORS
# SPDX-License-Identifier: CC0-1.0


version: 2.1


commands:
  install_system_dependencies:
    description: "Install system-level libraries/tools we depend on"
    steps:
      - run:
          name: Install system dependencies
          command: |
            case "$(uname -s)" in
              Linux*)
                apt --quiet update
                apt --yes install libgexiv2-dev
                ;;
              Darwin*)
                brew install gexiv2 pkg-config
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                ;;
            esac
  build_and_test_steps:
    description: "Build the library and test it"
    steps:
      - checkout
      - install_system_dependencies
      - run:
          name: Show environment info
          command: |
            rustc --version --verbose && echo ""
            cargo --version --verbose && echo ""
            case "$(uname -s)" in
              Linux*)
                dpkg --list libgexiv2-dev libexiv2-dev ;;
              Darwin*)
                brew list --versions gexiv2 exiv2 ;;
            esac
      - run:
          name: Build
          command: cargo build --verbose --all-features
      - run:
          name: Test
          command: cargo test --verbose --all-features -- --test-threads 2
      - run:
          name: Run Examples
          command: |
            cargo run --example gps
            cargo run --example timestamp


linux_job_config: &linux_job_config
  resource_class: small
  steps:
    - build_and_test_steps


jobs:
  test-osx-stable:
    macos:
      xcode: "14.0.0"
    steps:
      - build_and_test_steps
  test-linux-msrv:
    docker:
      - image: rust:1.63-slim
    <<: *linux_job_config
  test-linux-stable:
    docker:
      - image: rust:slim
    <<: *linux_job_config
  test-linux-nightly-with-coverage:
    resource_class: large
    docker:
      - image: rustlang/rust:nightly-slim
    steps:
      - checkout
      - install_system_dependencies
      - run:
          name: Install test coverage reporting dependencies
          command: |
            rustup component add llvm-tools-preview
            cargo install grcov
            apt install --yes curl gpg git
            curl https://keybase.io/codecovsecurity/pgp_keys.asc \
                | gpg --no-default-keyring --keyring keys.gpg --import
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpg --keyring keys.gpg --verify codecov.SHA256SUM.sig codecov.SHA256SUM
            sha256sum --check codecov.SHA256SUM
            chmod +x codecov
      - run:
          name: Run tests with coverage analysis
          command: |
            RUSTFLAGS="-C instrument-coverage" \
            RUSTDOCFLAGS="-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins" \
            LLVM_PROFILE_FILE="coverage-%p-%m.profraw" \
            cargo test --all-features
      - run:
          name: Upload coverage report to Codecov
          command: |
            grcov . --binary-path ./target/debug/ -t lcov --branch \
                --keep-only '/root/project/src/*' -o ./lcov.info
            ./codecov -Z
  check-lint-and-format:
    resource_class: small
    docker:
      - image: rustlang/rust:nightly-slim
    steps:
      - checkout
      - install_system_dependencies
      - run:
          name: Run linter
          command: cargo +nightly clippy --all-targets --all-features -- -D warnings
      - run:
          name: Check formatting
          command: cargo +nightly fmt --check
  check-spdx:
    resource_class: small
    docker:
      - image: fsfe/reuse:latest
    steps:
      - checkout
      - run:
          name: Check SPDX licensing metadata
          command: reuse lint


workflows:
  build-and-test:
    jobs:
      - test-osx-stable
      - test-linux-msrv
      - test-linux-stable
      - test-linux-nightly-with-coverage
      - check-lint-and-format
      - check-spdx
